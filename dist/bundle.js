/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/adapters/BinanceAdapter.js":
/*!****************************************!*\
  !*** ./src/adapters/BinanceAdapter.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass BinanceAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  async processApiData(userClient) {}\n\n  processCsvData() {}\n\n}\n\nexports.default = BinanceAdapter;\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/BinanceAdapter.js?");

/***/ }),

/***/ "./src/adapters/CoinbaseAdapter.js":
/*!*****************************************!*\
  !*** ./src/adapters/CoinbaseAdapter.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass CoinbaseAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  async processApiData(userClient) {}\n\n  processCsvData() {}\n\n}\n\nexports.default = CoinbaseAdapter;\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/CoinbaseAdapter.js?");

/***/ }),

/***/ "./src/adapters/FtxAdapter.js":
/*!************************************!*\
  !*** ./src/adapters/FtxAdapter.js ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _moment = __webpack_require__(/*! moment */ \"moment\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar client;\n\nclass FtxAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  processCsvData() {}\n\n  async processApiData(userClient) {\n    var trades = [];\n    client = userClient;\n    var data = await client.getFills();\n\n    for (let line of data) {\n      let trade = {\n        userId: this.userId,\n        exchange: 'ftx'\n      };\n\n      if (line['future']) {\n        trade.type = 'future-basis';\n        let baseQuote = line['market'].split('-');\n        trade.base = baseQuote[0];\n        trade.quote = baseQuote[1];\n      } else {\n        trade.type = 'spot';\n        trade.base = line['baseCurrency'];\n        trade.quote = line['quoteCurrency'];\n      }\n\n      trade.price = line['price'];\n      trade.feeCurrency = line['feeCurrency'];\n      trade.fee = line['fee'];\n      trade.amount = line['size'];\n      if (line['side'] === 'sell') trade.amount = -trade.amount;\n      trade.dateTime = _moment2.default.utc(line['time']);\n      trade.orderId = line['orderId'];\n      trade.tradeId = line['tradeId'];\n      trades.push(trade);\n    }\n\n    var orders = await this.buildOrders(trades);\n    orders = orders.reverse();\n    var positions = await this.buildPositions(orders);\n    return {\n      orders: orders,\n      positions: positions\n    };\n  }\n\n  async buildOrders(trades) {\n    var orders = [];\n    var first = trades.shift();\n    var order = new Order(first, this.userId);\n\n    for (let trade of trades) {\n      if (trade.orderId == order.orderId) {\n        order.appendTrade(trade);\n      } else {\n        await order.fixFee();\n        order.roundValues();\n        orders.push(order);\n        order = new Order(trade, this.userId);\n      }\n    }\n\n    orders.push(order);\n    return orders;\n  }\n\n  async buildPositions(orders) {\n    var positions = [];\n    var router = new PositionRouter(this.userId);\n\n    for (let i = 0; i < orders.length; i++) {\n      let order = orders[i];\n      if (order.type === 'spot' || order.type === 'margin') continue;\n      let position = router.route(order);\n\n      if (position.isComplete()) {\n        await position.calcFunding();\n        positions.push(position);\n        position = router.finalize(position);\n        position.handleOrder(order);\n      } else {\n        let splitOrder = position.handleOrder(order);\n\n        if (splitOrder) {\n          orders[i] = splitOrder;\n          i -= 1;\n        }\n      }\n    }\n\n    return positions;\n  }\n\n}\n\nexports.default = FtxAdapter;\n\nclass PositionRouter {\n  constructor(userId) {\n    this.userId = userId;\n    this.positions = {};\n  }\n\n  route(order) {\n    var position;\n    var market = order.base + '/' + order.quote;\n\n    if (!this.positions[market]) {\n      position = new Position(order.userId);\n      this.positions[market] = position;\n    } else {\n      position = this.positions[market];\n    }\n\n    return position;\n  }\n\n  finalize(position) {\n    var market = position.base + '/' + position.quote;\n    this.positions[market] = new Position(position.userId);\n    return this.positions[market];\n  }\n\n}\n\nclass Position {\n  constructor(userId) {\n    this.collateralType = 'cash';\n    this.userId = userId;\n    this.basisTrades = [];\n    this.basisFee = 0.0;\n    this.fundingFee = 0.0;\n    this.fundingFeeCurrency = 'USD';\n    this.pnl = 0.0;\n    this.outstanding = 0.0; //this.avgEntryPrice = 0.0;\n\n    this.openPrice = 0.0;\n    this.closePrice = 0.0;\n    this.dateOpen = null;\n    this.dateClose = null;\n    this.base = null;\n    this.quote = null;\n    this.side = 'long';\n    this.exchange = 'ftx';\n    this.type = 'future';\n  }\n\n  print() {\n    console.log(this.base);\n    console.log(this.quote);\n    console.log(this.outstanding);\n  }\n\n  isEmpty() {\n    return this.basisTrades.length == 0;\n  }\n\n  isComplete() {\n    return !this.isEmpty() && this.outstanding == 0.0;\n  }\n\n  handleOrder(order) {\n    //console.log(order.base + '/' + order.quote + ' ' + order.amount + ' ' + order.price);\n    var splitOrder = null;\n\n    if (this.isEmpty()) {\n      // initialize\n      this.dateOpen = order.dateTime;\n      this.base = order.base;\n      this.quote = order.quote;\n      if (order.amount < 0) this.side = 'short';\n      this.openPrice = order.price;\n    } else if (this.side === 'long' && this.outstanding + order.amount < 0 || this.side === 'short' && this.outstanding + order.amount > 0) {\n      //handle closing corner case\n      var [orderLeft, orderRight] = order.split(-this.outstanding);\n      splitOrder = orderRight;\n      order = orderLeft;\n    }\n\n    this.outstanding += order.amount;\n    this.closePrice = order.price;\n    this.basisTrades.push(order);\n    this.basisFee += order.fee;\n    this.dateClose = order.dateTime;\n    this.pnl -= order.amount * order.price;\n    return splitOrder;\n  }\n\n  async calcFunding() {\n    if (!this.dateOpen || !this.dateClose) {\n      throw Error('Position not initialized');\n    }\n\n    var fundingPayments = await client.getFundingPayments(this.dateOpen, this.dateClose, this.base + '-' + this.quote);\n\n    for (let obj of fundingPayments) this.fundingFee += obj.payment;\n  }\n\n}\n\nclass Order {\n  constructor(trade, userId) {\n    this.orderId = trade.orderId;\n    this.exchange = trade.exchange;\n    this.base = trade.base;\n    this.quote = trade.quote;\n    this.amount = trade.amount;\n    this.price = trade.price;\n    this.dateTime = trade.dateTime;\n    this.feeCurrency = trade.feeCurrency;\n    this.fee = trade.fee;\n    this.type = trade.type;\n    this.userId = userId;\n    this.trades = [trade];\n    this.isSplit = false;\n  }\n\n  appendTrade(trade) {\n    var prevAmount = this.amount;\n    this.amount += trade.amount;\n    this.price = Math.abs(this.price * prevAmount + trade.price * trade.amount) / Math.abs(prevAmount + trade.amount);\n    this.trades.push(trade);\n  }\n\n  roundValues() {\n    this.amount = Math.round(this.amount * 10000) / 10000;\n    this.price = Math.round(this.price * 10000) / 10000;\n    this.fee = Math.round(this.fee * 10000) / 10000;\n  }\n\n  split(amount) {\n    var orderLeft = {\n      orderId: this.orderId,\n      exchange: this.exchange,\n      base: this.base,\n      quote: this.quote,\n      amount: amount,\n      price: this.price,\n      dateTime: this.dateTime,\n      feeCurrency: this.feeCurrency,\n      fee: this.fee,\n      type: this.type,\n      userId: this.userId,\n      trades: this.trades,\n      isSplit: true\n    };\n    var orderRight = {\n      orderId: this.orderId,\n      exchange: this.exchange,\n      base: this.base,\n      quote: this.quote,\n      amount: this.amount - amount,\n      price: this.price,\n      dateTime: this.dateTime,\n      feeCurrency: this.feeCurrency,\n      fee: this.fee,\n      type: this.type,\n      userId: this.userId,\n      trades: this.trades,\n      isSplit: true\n    };\n    return [orderLeft, orderRight];\n  }\n\n  async fixFee() {\n    if (this.feeCurrency !== 'USD' && this.quote !== 'USD') {\n      let price = await client.getHistoricalPrices(this.feeCurrency + '/USD', this.dateTime);\n      this.fee = price * this.fee;\n      this.feeCurrency = 'USD';\n    } else if (this.feeCurrency !== 'USD') {\n      this.fee = this.price * this.fee;\n      this.feeCurrency = 'USD';\n    } else {\n      return;\n    }\n  }\n\n}\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/FtxAdapter.js?");

/***/ }),

/***/ "./src/adapters/GdaxAdapter.js":
/*!*************************************!*\
  !*** ./src/adapters/GdaxAdapter.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass GdaxAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n}\n\nexports.default = GdaxAdapter;\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/GdaxAdapter.js?");

/***/ }),

/***/ "./src/adapters/GeminiAdapter.js":
/*!***************************************!*\
  !*** ./src/adapters/GeminiAdapter.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass GeminiAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  async processApiData(userClient) {}\n\n  processCsvData() {}\n\n}\n\nexports.default = GeminiAdapter;\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/GeminiAdapter.js?");

/***/ }),

/***/ "./src/adapters/KrakenAdapter.js":
/*!***************************************!*\
  !*** ./src/adapters/KrakenAdapter.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass KrakenAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  async processApiData(userClient) {}\n\n  processCsvData() {}\n\n}\n\nexports.default = KrakenAdapter;\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/KrakenAdapter.js?");

/***/ }),

/***/ "./src/adapters/KrakenFuturesAdapter.js":
/*!**********************************************!*\
  !*** ./src/adapters/KrakenFuturesAdapter.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _moment = __webpack_require__(/*! moment */ \"moment\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass KrakenFuturesAdapter {\n  constructor(userId) {\n    this.userId = userId;\n  }\n\n  async processApiData() {}\n\n  processCsvData(lines) {\n    lines = lines.reverse();\n    var validTypes = ['funding rate change', 'futures trade', 'futures liquidation'];\n    var positions = [];\n    var router = new PositionRouter(this.userId);\n\n    const dateToCheck = _moment2.default.utc('2020-03-29 23:07:09');\n\n    for (let line of lines) {\n      // parse Date as UTC\n      line.dateTime = _moment2.default.utc(line.dateTime);\n      let position = router.route(line);\n\n      if (validTypes.includes(line.type)) {\n        position.handleLine(line);\n      }\n\n      if (position.isComplete()) {\n        // Check for position complete and finalize\n        if (line.dateTime.isAfter(dateToCheck) && line.symbol.slice(0, 2) === 'pi') {\n          continue;\n        } //position.generatePnl();\n\n\n        positions.push(position);\n        router.finalize(position);\n      }\n    }\n\n    return {\n      positions: positions\n    };\n  }\n\n}\n\nexports.default = KrakenFuturesAdapter;\n\nclass PositionRouter {\n  constructor(userId) {\n    this.userId = userId;\n    this.positions = {};\n  }\n\n  route(line) {\n    var position;\n    var pair = line.account.slice(2).split(':');\n    var base = pair[0] === 'xbt' ? 'btc' : pair[0];\n    var quote = pair[1] === 'xbt' ? 'btc' : pair[1];\n    var market = base + '/' + quote;\n\n    if (!this.positions[market]) {\n      position = new Position(this.userId);\n      this.positions[market] = position;\n    } else {\n      position = this.positions[market];\n    }\n\n    return position;\n  }\n\n  finalize(position) {\n    var market = position.base + '/' + position.quote;\n    this.positions[market] = new Position(this.userId);\n  }\n\n}\n\nclass Position {\n  constructor(userId) {\n    this.collateralType = 'crypto';\n    this.userId = userId;\n    this.basisTrades = [];\n    this.basisFee = 0.0;\n    this.fundingFee = 0.0;\n    this.pnl = 0.0;\n    this.outstanding = 0.0;\n    this.basisFeeCurrency = 'USD';\n    this.fundingTrades = [];\n    this.compensationTrades = [];\n    this.outstanding = 0.0;\n    this.openPrice = 0.0;\n    this.closePrice = 0.0;\n    this.dateOpen = null;\n    this.dateClose = null;\n    this.base = null;\n    this.quote = null;\n    this.exchange = 'Kraken Futures';\n    this.type = 'future';\n  }\n\n  isComplete() {\n    return !this.isEmpty() && this.outstanding == 0.0;\n  }\n\n  isEmpty() {\n    return this.basisTrades.length == 0;\n  }\n\n  handleLine(line) {\n    if (this.isEmpty()) {\n      let pair = line.account.slice(2).split(':');\n      this.base = pair[0];\n      this.quote = pair[1];\n      this.fundingFeeCurrency = pair[0].toUpperCase();\n      if (this.base === 'xbt') this.base = 'btc';\n      if (this.quote === 'xbt') this.quote = 'btc';\n      this.dateOpen = line.dateTime;\n    }\n\n    if (line.symbol.slice(0, 2) === 'pi') {\n      this.handleBasisTrade(line);\n    } else {\n      this.handleFundingTrade(line);\n    }\n\n    if (this.isComplete()) {\n      this.dateClose = line.dateTime;\n    }\n  }\n\n  handleBasisTrade(line) {\n    this.createBasisTrade(line);\n    this.outstanding = parseFloat(line['new balance']);\n    this.openPrice = parseFloat(line['new average entry price']);\n    this.closePrice = parseFloat(line['trade price']);\n  }\n\n  createBasisTrade(line) {\n    const price = parseFloat(line['trade price']);\n    const trade = {\n      tradeId: line.uid,\n      dateTime: line.dateTime,\n      amount: parseFloat(line.change) / price,\n      price: price,\n      type: 'future-basis',\n      exchange: this.exchange,\n      base: this.base,\n      quote: this.quote,\n      userId: this.userId\n    };\n    this.basisTrades.push(trade);\n  }\n\n  handleFundingTrade(line) {\n    var funding = parseFloat(line['realized funding']);\n    var pnl = parseFloat(line['realized pnl']);\n    var price = parseFloat(line['trade price']);\n    var fee = parseFloat(line['fee']);\n\n    if (funding && funding != 0.0) {\n      this.fundingFee -= funding;\n      this.createFuturesFundingTrade(line);\n    } // if position open or close trade\n\n\n    if (line.type !== 'funding rate change') {\n      this.basisFee += fee * price;\n    } // if line is a position close trade\n\n\n    if (pnl && pnl != 0.0) {\n      this.pnl += pnl * price; // add compensative exchange trade to Trade db\n\n      this.createCompensationTrade(line); //console.log('created compensation trade');\n    }\n  }\n\n  createCompensationTrade(line) {\n    var trade = {\n      exchangeTradeId: line.uid,\n      dateTime: line.dateTime,\n      quote: this.quote,\n      base: this.base,\n      price: parseFloat(line['trade price']),\n      amount: parseFloat(line['realized pnl']),\n      exchange: this.exchange,\n      type: 'future-pnl',\n      comment: 'Compensative trade for futures position',\n      userId: this.userId\n    };\n    this.compensationTrades.push(trade);\n  }\n\n  createFuturesFundingTrade(line) {\n    var amount = parseFloat(line['realized funding']);\n    if (isNaN(amount)) amount = 0;\n    var price = parseFloat(line['funding rate']);\n    if (isNaN(price)) price = 0;\n    var trade = {\n      exchangeTradeId: line.uid,\n      dateTime: line.dateTime,\n      quote: this.quote,\n      base: this.base,\n      amount: -amount,\n      price: price,\n      type: 'future-funding',\n      exchange: this.exchange,\n      userId: this.userId\n    };\n    this.fundingTrades.push(trade);\n  }\n\n}\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/KrakenFuturesAdapter.js?");

/***/ }),

/***/ "./src/adapters/PoloniexAdapter.js":
/*!*****************************************!*\
  !*** ./src/adapters/PoloniexAdapter.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _datePriceMap = __webpack_require__(/*! ../ohlcv/date-price-map */ \"./src/ohlcv/date-price-map.js\");\n\nvar _datePriceMap2 = _interopRequireDefault(_datePriceMap);\n\nvar _moment = __webpack_require__(/*! moment */ \"moment\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _Map = __webpack_require__(/*! ../utils/Map */ \"./src/utils/Map.js\");\n\nvar _Map2 = _interopRequireDefault(_Map);\n\nvar _papaparse = __webpack_require__(/*! papaparse */ \"papaparse\");\n\nvar _papaparse2 = _interopRequireDefault(_papaparse);\n\nvar _fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass PoloniexAdapter {\n  constructor(userId) {\n    this.userId = userId;\n    this.btcHistory = new _datePriceMap2.default('BTC');\n    this.btcHistory.load(\"/home/alexandros/Projects/uniport/uniport-backend/src/ohlcv/daily_BTCUSD.csv\");\n    this.ethHistory = new _datePriceMap2.default('ETH');\n    this.ethHistory.load(\"/home/alexandros/Projects/uniport/uniport-backend/src/ohlcv/daily_ETHUSD.csv\"); //this.trades = [];\n    //this.orders = [];\n\n    this.spotOrders = [];\n    this.marginOrders = [];\n    this.positions = [];\n    this.positionRouter = new PositionRouter(userId);\n  }\n  /*\n   * First function that runs\n   *\n   * @param lines - csv file\n   */\n\n\n  processCsvData(lines) {\n    // Reverse for chronological order\n    lines = lines.reverse();\n    this.orders = this.buildOrders(lines);\n\n    for (let order of this.orders) {\n      if (order.type === 'spot') {\n        this.handleExchangeOrder(order);\n      } else {\n        this.handleMarginOrder(order);\n      }\n    } //this.printMarginOrders(this.marginOrders);\n\n\n    console.log(this.positions);\n  }\n\n  printMarginOrders(orders) {\n    const csv = this.ordersToCsv(orders);\n\n    _fs2.default.writeFile('./margin-orders.csv', csv, {\n      flag: 'w'\n    }, err => {\n      if (err) throw err;\n    });\n  }\n\n  ordersToCsv(orders) {\n    var ret = [];\n\n    for (let order of orders) {\n      var obj = {\n        'Date': order.dateTime,\n        'Pair': order.base + order.quote,\n        'Amount': order.amount,\n        'Price': order.price,\n        'PriceUSD': order.usdPrice\n      };\n      ret.push(obj);\n    }\n\n    return _papaparse2.default.unparse(ret, {\n      header: true\n    });\n  }\n\n  buildOrders(lines) {\n    const orders = [];\n    let trade = this.buildTrade(lines.shift());\n    let currentOrder = new Order(trade);\n\n    for (let line of lines) {\n      trade = this.buildTrade(line);\n\n      if (trade.orderId !== currentOrder.orderId) {\n        orders.push(currentOrder);\n        currentOrder = new Order(trade);\n      } else {\n        currentOrder.integrate(trade);\n      }\n    }\n\n    orders.push(currentOrder);\n    return orders;\n  }\n\n  handleExchangeOrder(order) {\n    this.spotOrders.push(order);\n  }\n  /* Logic that handles a margin order\n   *\n   * @param order\n   * @return -1 if i in loop should decrease to repeat order; 0 otherwise\n   */\n\n\n  handleMarginOrder(order) {\n    //this.marginOrders.push(order);\n    const pair = `${order.base}${order.quote}`;\n    let currentPosition = this.positionRouter.getCurrent(pair);\n    currentPosition.handleOrder(order); // If complete\n\n    if (currentPosition.isComplete()) {\n      this.positions.push(currentPosition);\n      this.positionRouter.finalize(pair);\n    }\n  }\n  /**\n   * Build exchange trade from line data\n   *\n   * @param line - line from csv file\n   * @return trade - constructed trade object\n   */\n\n\n  buildTrade(line) {\n    const trade = {};\n    trade.dateTime = new Date(line['Date']);\n    trade.userId = this.userId;\n    trade.exchange = 'Poloniex';\n    const pair = this.buildPair(line);\n    trade.base = pair[0];\n    trade.quote = pair[1];\n    trade.price = this.buildPrice(line);\n    trade.amount = this.buildAmount(line);\n    trade.orderId = line['Order Number'];\n    trade.type = this.buildType(line);\n    let price = trade.price;\n\n    if (trade.quote !== 'USD') {\n      const dateTime = _moment2.default.utc(trade.dateTime);\n\n      switch (trade.quote) {\n        case 'ETH':\n          {\n            const ethPrice = this.ethHistory.getValueLE(dateTime.unix());\n            price = price * ethPrice;\n            break;\n          }\n\n        case 'BTC':\n          {\n            const btcPrice = this.btcHistory.getValueLE(dateTime.unix());\n            price = price * btcPrice;\n            break;\n          }\n\n        default:\n          {\n            throw Error(`No historical data for ${trade.quote}`);\n          }\n      }\n    }\n\n    trade.usdPrice = price;\n    let fee = parseFloat(line['Fee Total']) * trade.usdPrice;\n    const feeCurrency = line['Fee Currency'];\n\n    if (feeCurrency === trade.quote) {\n      fee = fee / price;\n    }\n\n    trade.fee = fee;\n    trade.feeCurrency = 'USD';\n    return trade;\n  }\n\n  buildAmount(line) {\n    let amount = parseFloat(line['Amount']);\n\n    if (line['Type'] === 'Sell') {\n      amount = -amount;\n    }\n\n    return amount;\n  }\n\n  buildPrice(line) {\n    const price = parseFloat(line['Price']);\n    return price;\n  }\n\n  buildPair(line) {\n    const pair = line['Market'].split('/');\n    return pair;\n  }\n\n  buildType(line) {\n    const category = line['Category'];\n    let type = '';\n\n    switch (category) {\n      case 'Exchange':\n        type = 'spot';\n        break;\n\n      case 'Margin trade':\n        type = 'margin';\n        break;\n\n      case 'Settlement':\n        type = 'spot';\n        break;\n\n      default:\n        throw Error(\"Can't recognize Poloniex line\");\n    }\n\n    return type;\n  }\n\n}\n\nexports.default = PoloniexAdapter;\n\nclass PositionRouter {\n  constructor(userId) {\n    this.map = new _Map2.default();\n    this.userId = userId;\n  }\n\n  getCurrent(pair) {\n    const key = pair; //console.log(this.map.getKeyValuePairsArray());\n\n    if (this.map.contains(key)) {\n      //console.log('here1');\n      return this.map.getValue(key);\n    } else {\n      //console.log('here2');\n      const position = new Position(this.userId);\n      this.map.insert(key, position);\n      return position;\n    }\n  }\n\n  finalize(pair) {\n    const key = pair;\n    this.map.remove(key);\n  }\n\n}\n\nclass Position {\n  constructor(userId) {\n    this.collateralType = 'crypto';\n    this.userId = userId;\n    this.basisTrades = [];\n    this.basisFee = 0.0;\n    this.fundingFee = 0.0;\n    this.pnl = 0.0;\n    this.outstanding = 0.0;\n    this.basisFeeCurrency = 'USD';\n    this.fundingTrades = [];\n    this.compensationTrades = [];\n    this.outstanding = 0.0; // Absolute number\n\n    this.openPrice = 0.0;\n    this.closePrice = 0.0;\n    this.dateOpen = null;\n    this.dateClose = null;\n    this.base = null;\n    this.quote = null;\n    this.exchange = 'Poloniex';\n    this.type = 'margin';\n    this.max = 0.0; //this.adapter = adapter;\n  }\n  /**\n   * Function that checks if position is complete.\n   * Only an estimation because of inaccuarte data.\n   * If outstanding margin is less than 5% of max value of\n   * margin -> then complete\n   *\n   * @param order - order used to check if flip from long to short and vice versa\n   * @return boolean\n   */\n\n\n  orderInvalidates(order) {\n    if (this.basisTrades.length > 0 && Math.abs(this.outstanding) - Math.abs(order.amount) < 0) {\n      // If next order flips from long to short and vice versa \n      return true;\n    }\n\n    return false;\n  }\n\n  isComplete() {\n    // Since data is inaccurate, must estimate\n    if (!this.isEmpty() && Math.abs(this.outstanding / this.max) < 0.1) {\n      // If position *almost* closed with oustanding close to 0\n      return true;\n    }\n\n    return false;\n  }\n  /*\n   * Checks if initiated with margin trades\n   *\n   * @return boolean\n   */\n\n\n  isEmpty() {\n    return this.basisTrades.length === 0;\n  }\n\n  handleOrder(order) {\n    // If initiating or not\n    if (this.isEmpty()) {\n      this.base = order.base;\n      this.quote = order.quote;\n      this.dateOpen = order.dateTime;\n    } // outstanding\n\n\n    this.outstanding += order.amount; // max\n\n    if (Math.abs(this.outstanding) > Math.abs(this.max)) {\n      this.max = this.outstanding;\n    }\n\n    this.basisTrades.push(order); // Finalize when complete\n\n    if (this.isComplete()) {\n      this.finalize(order);\n    }\n  }\n\n  finalize(order) {\n    // dateClose\n    this.dateClose = order.dateTime; // pnl, fees\n\n    let pnl = 0.0;\n    let fees = 0.0;\n\n    for (let order of this.basisTrades) {\n      pnl += order.amount * order.price;\n      fees += fees;\n    }\n\n    this.pnl = -pnl - fees;\n    this.buildCompensationTrade(order, this.pnl);\n  }\n\n  buildCompensationTrade(order, pnl) {\n    const compensation = {};\n\n    if (Math.abs(this.outstanding) > 1) {\n      // If negative pnl\n      compensation.dateTime = order.dateTime;\n      compensation.price = order.usdPrice;\n      compensation.usdPrice = order.usdPrice;\n      compensation.base = order.base;\n      compensation.quote = 'USD';\n      compensation.userId = order.userId;\n      compensation.type = 'spot';\n      compensation.fee = 0.0;\n      compensation.feeCurrency = 'USD';\n      compensation.exchange = 'Poloniex';\n\n      if (this.basisTrades[0] > 0) {\n        // If long\n        compensation.amount = -this.outstanding;\n      } else {\n        // If short\n        compensation.amount = this.outstanding;\n      }\n\n      this.pnl -= Math.abs(this.outstanding * order.price);\n      this.pnl = this.pnl * order.usdPrice;\n    } else {\n      // If positive pnl\n      compensation.dateTime = order.dateTime;\n      compensation.price = order.usdPrice / order.price;\n      compensation.usdPrice = order.usdPrice / order.price;\n      compensation.base = order.quote;\n      compensation.quote = 'USD';\n      compensation.userId = order.userId;\n      compensation.type = 'spot';\n      compensation.fee = 0.0;\n      compensation.feeCurrency = 'USD';\n      compensation.exchange = 'Poloniex';\n      this.pnl = this.pnl * order.usdPrice;\n      compensation.amount = this.pnl / (order.usdPrice / order.price);\n    }\n\n    this.compensationTrades.push(compensation);\n  }\n\n}\n\nclass Order {\n  constructor(trade) {\n    this.dateTime = trade.dateTime;\n    this.usdPrice = trade.userId;\n    this.exchange = trade.exchange;\n    this.base = trade.base;\n    this.quote = trade.quote;\n    this.price = trade.price;\n    this.usdPrice = trade.usdPrice;\n    this.amount = trade.amount;\n    this.orderId = trade.orderId;\n    this.type = trade.type;\n    this.fee = trade.fee;\n    this.feeCurrency = trade.feeCurrency;\n  }\n\n  integrate(trade) {\n    this.price = (this.price * this.amount + trade.price * trade.amount) / (this.amount + trade.amount);\n    this.amount = this.amount + trade.amount;\n    this.fee = this.fee + trade.fee;\n  }\n\n}\n\n//# sourceURL=webpack://uniport-backend/./src/adapters/PoloniexAdapter.js?");

/***/ }),

/***/ "./src/clients/BinanceClient.js":
/*!**************************************!*\
  !*** ./src/clients/BinanceClient.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass BinanceClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n  }\n\n}\n\nexports.default = BinanceClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/BinanceClient.js?");

/***/ }),

/***/ "./src/clients/CoinbaseClient.js":
/*!***************************************!*\
  !*** ./src/clients/CoinbaseClient.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass CoinbaseClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n  }\n\n}\n\nexports.default = CoinbaseClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/CoinbaseClient.js?");

/***/ }),

/***/ "./src/clients/FtxClient.js":
/*!**********************************!*\
  !*** ./src/clients/FtxClient.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _axios = __webpack_require__(/*! axios */ \"axios\");\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _cryptoJs = __webpack_require__(/*! crypto-js */ \"crypto-js\");\n\nvar _cryptoJs2 = _interopRequireDefault(_cryptoJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass FtxClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n    this.mainUrl = 'https://ftx.com';\n  }\n\n  generateAuthHeaders(path) {\n    var timestamp = Date.now();\n    var message = `${timestamp}GET${path}`;\n\n    var signature = _cryptoJs2.default.HmacSHA256(message, this.secret);\n\n    signature = signature.toString(_cryptoJs2.default.enc.Hex);\n    return {\n      'FTX-KEY': this.key,\n      'FTX-SIGN': signature,\n      'FTX-TS': timestamp\n    };\n  }\n\n  getPositions() {\n    var path = '/api/positions';\n    var headers = this.generateAuthHeaders(path);\n\n    _axios2.default.get(this.mainUrl + path, {\n      headers: headers\n    }).then(res => console.log(res.data.result)).catch(err => console.log(err));\n  }\n\n  async getFills() {\n    // max return amount is 5000 trades\n    var fills = [];\n    var path = '/api/fills';\n    var startTimeParam = '?start_time=0';\n    var endTimeParam = `&end_time=${Math.floor(Date.now() / 1000)}`; //var endTimeParam = '&end_time=1614300261';\n\n    var headers = this.generateAuthHeaders(path + startTimeParam + endTimeParam);\n\n    try {\n      let res = await _axios2.default.get(this.mainUrl + path + startTimeParam + endTimeParam, {\n        headers: headers\n      });\n      let data = res.data.result;\n      let firstDate = data[data.length - 1].time;\n      endTimeParam = `&end_time=${Math.floor(new Date(firstDate) / 1000) - 1}`;\n      fills.push(...data);\n\n      while (data.length === 5000) {\n        headers = this.generateAuthHeaders(path + startTimeParam + endTimeParam);\n        res = await _axios2.default.get(this.mainUrl + path + startTimeParam + endTimeParam, {\n          headers: headers\n        });\n        data = res.data.result;\n        firstDate = data[data.length - 1].time;\n        endTimeParam = `&end_time=${Math.floor(new Date(firstDate) / 1000) - 1}`;\n        fills.push(...data);\n      }\n\n      return fills;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getOrderHistory() {\n    var hasMoreData = true;\n    var orders = [];\n    var path = '/api/orders/history';\n    var startTimeParam = '?start_time=0';\n    var endTimeParam = `&end_time=${Math.floor(Date.now() / 1000)}`;\n    var headers = this.generateAuthHeaders(path + startTimeParam + endTimeParam);\n\n    try {\n      let res = await _axios2.default.get(this.mainUrl + path + startTimeParam + endTimeParam, {\n        headers: headers\n      });\n      let data = res.data.result;\n      orders.push(data);\n      let lastDate = data[data.length - 1].createdAt;\n      endTimeParam = `&end_time=${Math.floor(new Date(lastDate) / 1000)}`;\n      hasMoreData = res.data.hasMoreData;\n\n      while (hasMoreData) {\n        headers = this.generateAuthHeaders(path + startTimeParam + endTimeParam);\n        let res = await _axios2.default.get(this.mainUrl + path + startTimeParam + endTimeParam, {\n          headers: headers\n        });\n        hasMoreData = res.data.hasMoreData;\n        data = res.data.result;\n        orders.push(data);\n        lastDate = data[data.length - 1].createdAt;\n        endTimeParam = `&end_time=${Math.floor(new Date(lastDate) / 1000)}`;\n      }\n\n      return orders;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getHistoricalPrices(marketName, dateTime) {\n    var path = '/api/markets/' + marketName + '/candles?resolution=15';\n    var endTimeParam = `&end_time=${Math.floor(new Date(dateTime) / 1000)}`;\n\n    try {\n      let res = await _axios2.default.get(this.mainUrl + path + endTimeParam);\n      let data = res.data.result[res.data.result.length - 1].close;\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getBorrowHistory() {\n    var path = '/api/spot_margin/borrow_history';\n    var headers = this.generateAuthHeaders(path);\n\n    try {\n      let res = await _axios2.default.get(this.mainUrl + path, {\n        headers: headers\n      });\n      return res.data.result;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async getFundingPayments(startTime = 0, endTime = Date.now(), market = null) {\n    var path = '/api/funding_payments';\n    var startTimeParam = `?start_time=${Math.floor(startTime / 1000)}`;\n    var endTimeParam = `&end_time=${Math.floor(endTime / 1000)}`;\n    var futureParam = '';\n    if (market) futureParam = `&future=${market}`;\n    var headers = this.generateAuthHeaders(path + startTimeParam + endTimeParam + futureParam);\n\n    try {\n      let res = await _axios2.default.get(this.mainUrl + path + startTimeParam + endTimeParam + futureParam, {\n        headers: headers\n      });\n      return res.data.result;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}\n\nexports.default = FtxClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/FtxClient.js?");

/***/ }),

/***/ "./src/clients/GeminiClient.js":
/*!*************************************!*\
  !*** ./src/clients/GeminiClient.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass GeminiClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n  }\n\n}\n\nexports.default = GeminiClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/GeminiClient.js?");

/***/ }),

/***/ "./src/clients/KrakenClient.js":
/*!*************************************!*\
  !*** ./src/clients/KrakenClient.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass KrakenClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n    this.mainUrl = 'https://ftx.com';\n  }\n\n}\n\nexports.default = KrakenClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/KrakenClient.js?");

/***/ }),

/***/ "./src/clients/KrakenFuturesClient.js":
/*!********************************************!*\
  !*** ./src/clients/KrakenFuturesClient.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nclass KrakenFuturesClient {\n  constructor(key, secret) {\n    this.key = key;\n    this.secret = secret;\n  }\n\n}\n\nexports.default = KrakenFuturesClient;\n\n//# sourceURL=webpack://uniport-backend/./src/clients/KrakenFuturesClient.js?");

/***/ }),

/***/ "./src/db.js":
/*!*******************!*\
  !*** ./src/db.js ***!
  \*******************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.stop = exports.start = exports.app = undefined;\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _express = __webpack_require__(/*! express */ \"express\");\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _orderRouter = __webpack_require__(/*! ./resources/order/order.router.js */ \"./src/resources/order/order.router.js\");\n\nvar _orderRouter2 = _interopRequireDefault(_orderRouter);\n\nvar _tradeRouter = __webpack_require__(/*! ./resources/trade/trade.router.js */ \"./src/resources/trade/trade.router.js\");\n\nvar _tradeRouter2 = _interopRequireDefault(_tradeRouter);\n\nvar _positionRouter = __webpack_require__(/*! ./resources/position/position.router.js */ \"./src/resources/position/position.router.js\");\n\nvar _positionRouter2 = _interopRequireDefault(_positionRouter);\n\nvar _user = __webpack_require__(/*! ./resources/user/user.router */ \"./src/resources/user/user.router.js\");\n\nvar _user2 = _interopRequireDefault(_user);\n\nvar _crudRouter = __webpack_require__(/*! ./utils/crudRouter */ \"./src/utils/crudRouter.js\");\n\nvar _crudRouter2 = _interopRequireDefault(_crudRouter);\n\nvar _user3 = __webpack_require__(/*! ./resources/user/user.model */ \"./src/resources/user/user.model.js\");\n\nvar _user4 = _interopRequireDefault(_user3);\n\nvar _exchange = __webpack_require__(/*! ./resources/exchange/exchange.model */ \"./src/resources/exchange/exchange.model.js\");\n\nvar _exchange2 = _interopRequireDefault(_exchange);\n\nvar _bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\n\nvar _bodyParser2 = _interopRequireDefault(_bodyParser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import exchangeRouter from './resources/exchange/exchange.router.js';\nvar app = exports.app = (0, _express2.default)();\napp.use(_bodyParser2.default.json({\n  limit: '50mb'\n}));\napp.use(_bodyParser2.default.urlencoded({\n  limit: '50mb',\n  extended: true\n}));\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS'); //res.header('Access-Control-Allow-Headers', '*');\n\n  res.header('Access-Control-Allow-Headers', 'Origin, Cross-Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\napp.use('/api/order', _orderRouter2.default);\napp.use('/api/trade', _tradeRouter2.default);\napp.use('/api/position', _positionRouter2.default);\nvar exchangeRouter = (0, _crudRouter2.default)(_exchange2.default);\napp.use('/api/exchange', exchangeRouter); //var userRouter = routerFactory(User);\n\napp.use('/api/user', _user2.default);\n\nvar start = exports.start = async function () {\n  try {\n    await _mongoose2.default.connect('mongodb://localhost:27017/uniport', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n      useFindAndModify: false,\n      useCreateIndex: true\n    });\n    console.log(\"Mongoose connection success!\");\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nvar stop = exports.stop = async function () {\n  try {\n    await _mongoose2.default.disconnect();\n    console.log(\"Mongoose connection closed\");\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//# sourceURL=webpack://uniport-backend/./src/db.js?");

/***/ }),

/***/ "./src/ohlcv/date-price-map.js":
/*!*************************************!*\
  !*** ./src/ohlcv/date-price-map.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _functionalRedBlackTree = __webpack_require__(/*! functional-red-black-tree */ \"functional-red-black-tree\");\n\nvar _functionalRedBlackTree2 = _interopRequireDefault(_functionalRedBlackTree);\n\nvar _papaparse = __webpack_require__(/*! papaparse */ \"papaparse\");\n\nvar _papaparse2 = _interopRequireDefault(_papaparse);\n\nvar _fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _moment = __webpack_require__(/*! moment */ \"moment\");\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass DatePriceMap {\n  constructor(ticker) {\n    this._tree = (0, _functionalRedBlackTree2.default)();\n    this.ticker = ticker.toUpperCase();\n  }\n\n  insert(key, value) {\n    this._tree = this._tree.insert(key, value);\n  }\n\n  getValue(key) {\n    const iter = this._tree.get(key);\n\n    return iter.node.value;\n  }\n\n  getValueLE(key) {\n    const iter = this._tree.le(key);\n\n    return iter.node.value;\n  }\n\n  load(filePath) {\n    function processLine(classObj, line) {\n      const datetime = _moment2.default.utc(line.timestamp);\n\n      const price = Number(line.open);\n      classObj.insert(datetime.unix(), price);\n    }\n\n    try {\n      const data = _fs2.default.readFileSync(filePath, 'utf-8');\n\n      _papaparse2.default.parse(data, {\n        header: true,\n        complete: results => {\n          results.data.forEach(line => processLine(this, line));\n        },\n        error: error => {\n          console.log(error);\n        },\n        skipEmptyLines: true\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  getKeyValuePairsArray() {\n    const iter = this._tree.begin;\n    const pairs = [];\n\n    while (iter.valid) {\n      const key = iter.node.key;\n      const value = iter.node.value;\n      pairs.push([key, value]);\n      iter.next();\n    }\n\n    return pairs;\n  }\n\n}\n\nexports.default = DatePriceMap;\n\n//# sourceURL=webpack://uniport-backend/./src/ohlcv/date-price-map.js?");

/***/ }),

/***/ "./src/resources/exchange/exchange.model.js":
/*!**************************************************!*\
  !*** ./src/resources/exchange/exchange.model.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar {\n  Schema\n} = _mongoose2.default;\nvar exchangeSchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  logoUri: {\n    type: String,\n    required: true\n  }\n}, {\n  versionKey: false\n});\n/***Index***/\n\nexchangeSchema.index({\n  name: 1\n}, {\n  unique: true\n});\n/***Hooks***/\n\n/*\nexchangeSchema.pre('save', function(next) {\n  var err = new Error('Futures url info needed');\n  if (this.futures && (!this.futuresApiUrl || !this.processFuturesUrl)) next(err);\n  next();\n});\n*/\n\nvar Exchange = new _mongoose2.default.model('Exchange', exchangeSchema);\nexports.default = Exchange;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/exchange/exchange.model.js?");

/***/ }),

/***/ "./src/resources/order/order.controllers.js":
/*!**************************************************!*\
  !*** ./src/resources/order/order.controllers.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _crud = __webpack_require__(/*! ../../utils/crud.js */ \"./src/utils/crud.js\");\n\nvar _crud2 = _interopRequireDefault(_crud);\n\nvar _orderModel = __webpack_require__(/*! ./order.model.js */ \"./src/resources/order/order.model.js\");\n\nvar _orderModel2 = _interopRequireDefault(_orderModel);\n\nvar _tradeModel = __webpack_require__(/*! ../trade/trade.model.js */ \"./src/resources/trade/trade.model.js\");\n\nvar _tradeModel2 = _interopRequireDefault(_tradeModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nasync function deleteOne(req, res) {\n  try {\n    _orderModel2.default.findOneAndDelete({ ...req.body\n    }, function (err, removed) {\n      if (err) return res.status(400).end(); // delete subtrades\n\n      removed.tradeIds.forEach(async id => {\n        await _tradeModel2.default.deleteOne({\n          \"_id\": id\n        });\n      });\n      return res.status(200).json(removed);\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}\n\nasync function deleteAll(req, res) {\n  try {\n    let removed = await _orderModel2.default.deleteMany({});\n    if (!removed) return res.status(400).end(); // if order deletion successful, delete all trades\n\n    await _tradeModel2.default.deleteMany({});\n    return res.status(200).json(removed);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}\n\nvar controllers = (0, _crud2.default)(_orderModel2.default);\ncontrollers.deleteOne = deleteOne;\ncontrollers.deleteAll = deleteAll;\nexports.default = controllers;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/order/order.controllers.js?");

/***/ }),

/***/ "./src/resources/order/order.model.js":
/*!********************************************!*\
  !*** ./src/resources/order/order.model.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _tradeModel = __webpack_require__(/*! ../trade/trade.model.js */ \"./src/resources/trade/trade.model.js\");\n\nvar _tradeModel2 = _interopRequireDefault(_tradeModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar {\n  Schema\n} = _mongoose2.default;\nvar exchanges = ['Bitfinex', 'Poloniex', 'Kraken', 'Binance', 'Gdax', 'Gemini', 'Coinbase', 'Ftx', 'Kraken Kutures'];\nvar orderSchema = new Schema({\n  userId: {\n    type: _mongoose2.default.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  exchange: {\n    type: String,\n    enum: exchanges,\n    required: true,\n    lowercase: true\n  },\n  orderId: {\n    type: String,\n    default: null\n  },\n  dateTime: {\n    type: Date,\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  price: {\n    type: Number,\n    required: true\n  },\n  usdPrice: {\n    type: Number,\n    required: true\n  },\n  quote: {\n    type: String,\n    required: true,\n    uppercase: true\n  },\n  base: {\n    type: String,\n    required: true,\n    uppercase: true\n  },\n  fee: {\n    type: Number,\n    default: 0\n  },\n  feeCurrency: {\n    type: String,\n    default: \"USD\",\n    uppercase: true\n  },\n  type: {\n    type: String,\n    enum: ['spot', 'margin', 'future-basis', 'future-funding', 'future-pnl'],\n    required: true\n  },\n  isSplit: {\n    type: Boolean,\n    required: true\n  },\n  comments: {\n    type: String,\n    default: null\n  },\n  tradeIds: {\n    type: [_mongoose2.default.Schema.Types.ObjectId],\n    default: []\n  }\n}, {\n  versionKey: false\n});\n/***Index***/\n\norderSchema.index({\n  userId: 1,\n  dateTime: 1,\n  type: 1,\n  exchange: 1,\n  exchangeOrderId: 1,\n  quote: 1,\n  base: 1\n}, {\n  unique: true\n});\n/***Statics***/\n\norderSchema.statics.sumAmount = function (orders) {\n  var amount = 0;\n  orders.forEach(trade => {\n    amount += trade.amount;\n  });\n  return amount;\n};\n/***Methods***/\n\n\norderSchema.methods.deleteTrades = async function () {\n  for (let tradeId of this.tradeIds) {\n    await _tradeModel2.default.findByIdAndDelete(tradeId);\n  }\n};\n/***Hooks***/\n\n/*\nconst cb = function(next) {\n  this.select('-__v');\n  next();\n}\n\norderSchema.pre('find', cb);\n\norderSchema.pre('findOne', cb);\n\norderSchema.pre('findOneAndDelete', cb);\n\norderSchema.pre('deleteMany', cb);\n*/\n\n/*\norderSchema.pre('save', async function() {\n  // if order exists in db -> skip\n  //var exists = await this.exists;\n  //if (exists) throw Error(\"Order already exists\");\n});\n\norderSchema.post('save', function() {\n    console.log(\"Order created\");\n})\n\norderSchema.post('findOneAndDelete', function() {\n    console.log(\"Order deleted\");\n})\norderSchema.post('deleteMany', function() {\n    console.log(\"All orders deleted\");\n})\n\norderSchema.post('updateOne', function() {\n    console.log(\"Order updated\");\n})\n*/\n\n/***Virtuals***/\n\n\norderSchema.virtual('id').get(function () {\n  return this._id.toHexString();\n});\norderSchema.virtual('isComplete').get(async function () {\n  var trades = [];\n\n  try {\n    trades = await _tradeModel2.default.find({\n      orderId: this._id\n    }).exec();\n  } catch (err) {\n    console.log(err);\n  }\n\n  return this.amount == _tradeModel2.default.sumAmount(trades);\n});\n/***Settings***/\n\nconst settings = {\n  virtuals: true,\n  transform: function (doc, ret) {\n    delete ret._id;\n  }\n};\norderSchema.set('toJSON', settings);\norderSchema.set('toObject', settings);\nvar Order = new _mongoose2.default.model('Order', orderSchema); // Must be at bottom of file for hooks to work\n\nexports.default = Order;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/order/order.model.js?");

/***/ }),

/***/ "./src/resources/order/order.router.js":
/*!*********************************************!*\
  !*** ./src/resources/order/order.router.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _express = __webpack_require__(/*! express */ \"express\");\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _orderControllers = __webpack_require__(/*! ./order.controllers.js */ \"./src/resources/order/order.controllers.js\");\n\nvar _orderControllers2 = _interopRequireDefault(_orderControllers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar router = _express2.default.Router(); // /api/order\n\n\nrouter.route('/').get(_orderControllers2.default.getOne).post(_orderControllers2.default.createOne).delete(_orderControllers2.default.deleteOne); // /api/order/all\n\nrouter.route('/all').get(_orderControllers2.default.getAll).delete(_orderControllers2.default.deleteAll); // /api/order/:id\n\nrouter.route('/:id').get(_orderControllers2.default.getOne).delete(_orderControllers2.default.deleteOne);\nexports.default = router;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/order/order.router.js?");

/***/ }),

/***/ "./src/resources/position/position.controller.js":
/*!*******************************************************!*\
  !*** ./src/resources/position/position.controller.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _crud = __webpack_require__(/*! ../../utils/crud */ \"./src/utils/crud.js\");\n\nvar _crud2 = _interopRequireDefault(_crud);\n\nvar _trade = __webpack_require__(/*! ../trade/trade.model */ \"./src/resources/trade/trade.model.js\");\n\nvar _trade2 = _interopRequireDefault(_trade);\n\nvar _position = __webpack_require__(/*! ../position/position.model */ \"./src/resources/position/position.model.js\");\n\nvar _position2 = _interopRequireDefault(_position);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nasync function deleteOne(req, res) {\n  try {\n    _position2.default.findOneAndDelete({ ...req.body\n    }, (err, removed) => {\n      if (err) res.status(400).end();\n      res.status(200).json(removed);\n    });\n  } catch (err) {\n    res.status(400).end();\n  }\n}\n\nasync function deleteAll(req, res) {\n  try {\n    let removed = await _position2.default.deleteMany({});\n    if (!removed) return res.status(400).end();\n    return res.status(200).json(removed);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}\n\nvar controllers = (0, _crud2.default)(_position2.default);\ncontrollers.deleteOne = deleteOne;\ncontrollers.deleteAll = deleteAll;\nexports.default = controllers;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/position/position.controller.js?");

/***/ }),

/***/ "./src/resources/position/position.model.js":
/*!**************************************************!*\
  !*** ./src/resources/position/position.model.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _orderModel = __webpack_require__(/*! ../order/order.model.js */ \"./src/resources/order/order.model.js\");\n\nvar _orderModel2 = _interopRequireDefault(_orderModel);\n\nvar _tradeModel = __webpack_require__(/*! ../trade/trade.model.js */ \"./src/resources/trade/trade.model.js\");\n\nvar _tradeModel2 = _interopRequireDefault(_tradeModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst {\n  Schema\n} = _mongoose2.default;\nconst exchanges = ['bitfinex', 'poloniex', 'kraken', 'binance', 'gdax', 'gemini', 'coinbase', 'ftx', 'kraken futures'];\nconst positionSchema = new Schema({\n  userId: {\n    type: _mongoose2.default.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  exchange: {\n    type: String,\n    enum: exchanges,\n    required: true,\n    lowercase: true\n  },\n  dateOpen: {\n    type: Date,\n    required: true\n  },\n  dateClose: {\n    type: Date,\n    required: true\n  },\n  pnl: {\n    type: Number,\n    required: true\n  },\n  openPrice: {\n    type: Number,\n    required: true\n  },\n  closePrice: {\n    type: Number,\n    required: true\n  },\n  fundingFee: {\n    type: Number,\n    required: true\n  },\n  fundingTradeIds: {\n    type: [_mongoose2.default.Schema.Types.ObjectId]\n  },\n  basisFee: {\n    type: Number,\n    required: true\n  },\n  basisFeeCurrency: {\n    type: String,\n    default: 'USD'\n  },\n  fundingFeeCurrency: {\n    type: String,\n    default: 'USD'\n  },\n  basisTradeIds: {\n    type: [_mongoose2.default.Schema.Types.ObjectId],\n    required: true\n  },\n  compensationTradeIds: {\n    type: [_mongoose2.default.Schema.Types.ObjectId]\n  },\n  base: {\n    type: String,\n    required: true,\n    uppercase: true\n  },\n  quote: {\n    type: String,\n    required: true,\n    uppercase: true\n  },\n  comments: {\n    type: String,\n    default: null\n  },\n  type: {\n    type: String,\n    enum: ['future', 'margin'],\n    required: true\n  },\n  collateralType: {\n    type: String,\n    enum: ['cash', 'crypto'],\n    required: true\n  }\n}, {\n  versionKey: false\n});\n/***Index***/\n\npositionSchema.index({\n  userId: 1,\n  exchange: 1,\n  dateClose: 1,\n  dateOpen: 1,\n  quote: 1,\n  base: 1\n}, {\n  unique: true\n});\n/***Hooks***/\n\n/*\nconst cb = function(next) {\n  this.select('-__v');\n  next();\n}\n\npositionSchema.pre('find', cb);\n\npositionSchema.pre('findOne', cb);\n\npositionSchema.pre('findOneAndDelete', cb);\n\npositionSchema.pre('deleteMany', cb);\n*/\n\n/***Virtual***/\n\npositionSchema.virtual('id').get(function () {\n  return this._id.toHexString();\n});\n/***Methods***/\n\npositionSchema.methods.deleteTrades = async function () {\n  const tradeIds = [];\n  this.basisTradeIds.forEach(id => tradeIds.push(id));\n  this.fundingTradeIds.forEach(id => tradeIds.push(id));\n  this.compensationTradeIds.forEach(id => tradeIds.push(id));\n\n  for (let id of tradeIds) {\n    await _tradeModel2.default.findByIdAndDelete(id);\n  }\n};\n/***Hooks***/\n\n/*\npositionSchema.post('save', async function() {\n  console.log(\"Position created\");\n});\n\npositionSchema.post('find', function() {\n});\n\npositionSchema.post('deleteOne', function() {\n  console.log(\"Position deleted\");\n});\n\npositionSchema.post('findOneAndDelete', function() {\n  console.log(\"Position deleted\");\n});\n\n\npositionSchema.post('deleteMany', function() {\n  console.log(\"All positions deleted\");\n});\n\npositionSchema.post('updateOne', function() {\n  console.log(\"Position updated\");\n})\n*/\n\n/***Settings***/\n\n\nconst settings = {\n  virtuals: true,\n  transform: function (doc, ret) {\n    delete ret._id;\n  }\n};\npositionSchema.set('toJSON', settings);\npositionSchema.set('toObject', settings);\nconst Position = new _mongoose2.default.model('Position', positionSchema);\nexports.default = Position;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/position/position.model.js?");

/***/ }),

/***/ "./src/resources/position/position.router.js":
/*!***************************************************!*\
  !*** ./src/resources/position/position.router.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _express = __webpack_require__(/*! express */ \"express\");\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _position = __webpack_require__(/*! ./position.controller */ \"./src/resources/position/position.controller.js\");\n\nvar _position2 = _interopRequireDefault(_position);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar router = _express2.default.Router(); // /api/position\n\n\nrouter.route('/').get(_position2.default.getOne).post(_position2.default.createOne).delete(_position2.default.deleteOne); // /api/position/all\n\nrouter.route('/all').get(_position2.default.getAll).delete(_position2.default.deleteAll); // /api/position/:id\n\nrouter.route('/:id').get(_position2.default.getOne).delete(_position2.default.deleteOne);\nexports.default = router;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/position/position.router.js?");

/***/ }),

/***/ "./src/resources/trade/trade.controllers.js":
/*!**************************************************!*\
  !*** ./src/resources/trade/trade.controllers.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _crud = __webpack_require__(/*! ../../utils/crud.js */ \"./src/utils/crud.js\");\n\nvar _crud2 = _interopRequireDefault(_crud);\n\nvar _tradeModel = __webpack_require__(/*! ./trade.model.js */ \"./src/resources/trade/trade.model.js\");\n\nvar _tradeModel2 = _interopRequireDefault(_tradeModel);\n\nvar _orderModel = __webpack_require__(/*! ../order/order.model.js */ \"./src/resources/order/order.model.js\");\n\nvar _orderModel2 = _interopRequireDefault(_orderModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nasync function deleteOne(req, res) {\n  try {\n    _tradeModel2.default.findOneAndDelete({ ...req.body\n    }, async function (err, removed) {\n      if (err) return res.status(400).end(); // delete tradeId from parent order\n\n      let id = removed.orderId;\n      let parentOrder = await _orderModel2.default.findById(id);\n      let tradeIds = parentOrder.tradeIds;\n      tradeIds.splice(tradeIds.indexOf(removed.id), 1);\n      await parentOrder.updateOne({\n        tradeIds: tradeIds\n      });\n      return res.status(200).json(removed);\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}\n\nasync function deleteAll(req, res) {\n  try {\n    let removed = await _tradeModel2.default.deleteMany({});\n    if (!removed) return res.status(400).end();\n    return res.status(200).json(removed);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}\n\nvar controllers = (0, _crud2.default)(_tradeModel2.default);\ncontrollers.deleteOne = deleteOne;\ncontrollers.deleteAll = deleteAll;\nexports.default = controllers;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/trade/trade.controllers.js?");

/***/ }),

/***/ "./src/resources/trade/trade.model.js":
/*!********************************************!*\
  !*** ./src/resources/trade/trade.model.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nvar _orderModel = __webpack_require__(/*! ../order/order.model.js */ \"./src/resources/order/order.model.js\");\n\nvar _orderModel2 = _interopRequireDefault(_orderModel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar {\n  Schema\n} = _mongoose2.default;\nvar exchanges = ['Bitfinex', 'Poloniex', 'Kraken', 'Binance', 'Gdax', 'Gemini', 'Coinbase', 'Ftx', 'Kraken Kutures'];\nvar tradeSchema = new Schema({\n  userId: {\n    type: _mongoose2.default.Schema.Types.ObjectId,\n    ref: 'User',\n    default: null\n  },\n  exchange: {\n    type: String,\n    enum: exchanges,\n    required: true,\n    lowercase: true\n  },\n  tradeId: {\n    type: String,\n    default: null\n  },\n  dateTime: {\n    type: Date,\n    required: true\n  },\n  amount: {\n    type: Number,\n    required: true\n  },\n  price: {\n    type: Number,\n    required: true\n  },\n  usdPrice: {\n    type: Number,\n    required: true\n  },\n  quote: {\n    type: String,\n    required: true,\n    uppercase: true\n  },\n  base: {\n    type: String,\n    uppercase: true,\n    required: true\n  },\n  fee: {\n    type: Number,\n    default: 0\n  },\n  feeCurrency: {\n    type: String,\n    default: \"USD\",\n    uppercase: true\n  },\n  type: {\n    type: String,\n    enum: ['spot', 'margin', 'future-basis', 'future-funding', 'future-pnl'],\n    required: true\n  },\n  orderId: {\n    type: String,\n    default: null\n  },\n  comment: {\n    type: String\n  }\n}, {\n  versionKey: false\n});\n/***Index***/\n\ntradeSchema.index({\n  userId: 1,\n  dateTime: 1,\n  type: 1,\n  exchange: 1,\n  exchangeOrderId: 1,\n  exchangeTradeId: 1,\n  quote: 1,\n  base: 1\n});\n/***Statics***/\n\ntradeSchema.statics.sumAmount = function (trades) {\n  var amount = 0;\n  trades.forEach(trade => {\n    amount += trade.amount;\n  });\n  return amount;\n};\n/***Methods***/\n\n\ntradeSchema.methods.associate = async function (order) {\n  // associate Order with Trade\n  var tradeIds = order.tradeIds;\n  tradeIds.push(this._id);\n  order = await _orderModel2.default.findByIdAndUpdate(order._id, {\n    tradeIds: tradeIds\n  }, {\n    new: true\n  }); // associate Trade with Order \n\n  this.orderId = order.id;\n  this.exchangeOrderId = order.exchangeOrderId;\n};\n\ntradeSchema.methods.findParentOrder = async function () {\n  var order; // conidition on exchangeOrderId\n\n  try {\n    if (this.exchangeOrderId) {\n      order = await _orderModel2.default.findOne({\n        'exchangeOrderId': this.exchangeOrderId,\n        'exchange': this.exchange\n      }).exec();\n    } else {\n      order = await _orderModel2.default.findOne({\n        'exchange': this.exchange,\n        'quote': this.quote,\n        'base': this.base,\n        'type': this.type,\n        'dateStart': {\n          $lte: this.date\n        },\n        'dateStop': {\n          $gte: this.date\n        }\n      }).exec();\n    }\n  } catch (err) {\n    console.error(err);\n  }\n\n  if (!order) throw Error(\"No parent order found\");\n  return order;\n};\n/***Hooks***/\n\n\ntradeSchema.pre('save', async function (next) {\n  // if trade exists in db -> skip\n  //var exists = await this.exists;\n  //if (exists) throw Error(\"Trade already exists\");\n  // if futures trade\n  if (this.type !== 'exchange' || this.exchange === 'gdax') next(); // if parent order not found, will throw an error\n\n  var parentOrder = await this.findParentOrder(); // if order is complete -> skip\n\n  if (await parentOrder.isComplete) throw Error(\"Parent order already complete\"); // if trade amount exceeds remaining amount left in order -> skip\n\n  var trades = await Trade.find({\n    '_id': {\n      $in: parentOrder.tradeIds\n    }\n  });\n  var filledAmount = Trade.sumAmount(trades);\n  if (filledAmount + this.amount > parentOrder.amount) throw Error(\"Max amount exceeded\"); // associate with parent order\n\n  await this.associate(parentOrder);\n});\n\nconst cb = function (next) {\n  this.select('-__v');\n  next();\n};\n\ntradeSchema.pre('find', cb);\ntradeSchema.pre('findOne', cb);\ntradeSchema.pre('findOneAndDelete', cb);\ntradeSchema.pre('deleteMany', cb);\n/***Virtuals***/\n\ntradeSchema.virtual('id').get(function () {\n  return this._id.toHexString();\n});\n/*\ntradeSchema.virtual('pair').get(function() {\n\t\treturn `${this.quote}${this.base}`;\n});\n\ntradeSchema.virtual('exists').get(async function() {\n\t\tvar queryParams = {\n\t\t\t\texchange: this.exchange,\n\t\t\t\texchangeTradeId: this.exchangeTradeId,\n\t\t};\n\n\t\tvar exists = false;\n\t\ttry {\n\t\t\t\tvar doc = await Trade.findOne(queryParams);\n\t\t\t\tif (doc) exists = true;\n\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t}\n\t\treturn exists;\n})\n/*\ntradeSchema.virtual('orderIsComplete').get(async function() {\n\n\t\tvar order = await Order.findById(this.orderId);\n\n\t\treturn order.isComplete ? true : false;\n});\n*/\n\n/***Settings***/\n\nconst settings = {\n  virtuals: true,\n  transform: function (doc, ret) {\n    delete ret._id;\n  }\n};\ntradeSchema.set('toJSON', settings);\ntradeSchema.set('toObject', settings);\nvar Trade = new _mongoose2.default.model('Trade', tradeSchema);\nexports.default = Trade;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/trade/trade.model.js?");

/***/ }),

/***/ "./src/resources/trade/trade.router.js":
/*!*********************************************!*\
  !*** ./src/resources/trade/trade.router.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _express = __webpack_require__(/*! express */ \"express\");\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _tradeControllers = __webpack_require__(/*! ./trade.controllers.js */ \"./src/resources/trade/trade.controllers.js\");\n\nvar _tradeControllers2 = _interopRequireDefault(_tradeControllers);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar router = _express2.default.Router(); // /api/trade\n\n\nrouter.route('/').get(_tradeControllers2.default.getOne).post(_tradeControllers2.default.createOne).delete(_tradeControllers2.default.deleteOne); // /api/trade/all\n\nrouter.route('/all').get(_tradeControllers2.default.getAll).delete(_tradeControllers2.default.deleteAll); // /api/trade/:id\n\nrouter.route('/:id').get(_tradeControllers2.default.getOne).delete(_tradeControllers2.default.deleteOne);\nexports.default = router;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/trade/trade.router.js?");

/***/ }),

/***/ "./src/resources/user/user.model.js":
/*!******************************************!*\
  !*** ./src/resources/user/user.model.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\n\nvar _mongoose2 = _interopRequireDefault(_mongoose);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst {\n  Schema\n} = _mongoose2.default;\nconst userSchema = new Schema({\n  email: {\n    type: String,\n    required: true\n  },\n  firstName: {\n    type: String,\n    required: true\n  },\n  lastName: {\n    type: String,\n    required: true\n  },\n  exchanges: [{\n    exchange: {\n      type: _mongoose2.default.Schema.Types.ObjectId,\n      required: true,\n      ref: 'Exchange'\n    },\n    numTrades: {\n      type: Number,\n      default: 0\n    },\n    lastImport: {\n      type: Date,\n      default: '1/1/2020'\n    },\n    numLastImport: {\n      type: Number,\n      default: 0\n    },\n    apiKey: {\n      type: String,\n      default: ''\n    },\n    apiSecret: {\n      type: String,\n      default: ''\n    }\n  }],\n  settings: {\n    maxLines: {\n      type: Number,\n      default: 25\n    }\n  }\n}, {\n  versionKey: false\n});\n/***Index***/\n\nuserSchema.index({\n  email: 1\n}, {\n  unique: true\n});\n/***Hooks***/\n\n/*\nconst cb = function(next) {\n  this.select('-__v');\n  next();\n}\nuserSchema.pre('find', cb);\n\nuserSchema.pre('findOne', cb);\n\nuserSchema.pre('findOneAndDelete', cb);\n\nuserSchema.pre('deleteMany', cb);\n*/\n\n/***Virtuals***/\n\nuserSchema.virtual('id').get(function () {\n  return this._id.toHexString();\n});\n/*\nuserSchema.pre('update', function(next) {\n  let userExchangeIds = this.exchanges.map(exchange => exchange.info);\n  if (userExchangeIds.includes())\n})\n*/\n\n/***Methods***/\n\n/*\nuserSchema.methods.updateOrders = function(userId, orders, cb) {\n  console.log('here');\n  return mongoose.model('User').findById(userId, (err, user) => {\n    if (err) {\n      throw new Error(err);\n    }\n    orders.forEach(async order => {\n      let doc = await Order.save(order);\n      console.log(doc);\n      user.orders.push(doc.id);\n      user.save(cb);\n    })\n  })\n}\n*/\n\nuserSchema.methods.updateSettings = async function (settings) {\n  this.settings = settings;\n  await this.save();\n};\n/***Settings***/\n\n\nconst settings = {\n  virtuals: true,\n  transform: function (doc, ret) {\n    delete ret._id;\n  }\n};\nuserSchema.set('toJSON', settings);\nuserSchema.set('toObject', settings);\n\nvar User = _mongoose2.default.model('User', userSchema);\n\nexports.default = User;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/user/user.model.js?");

/***/ }),

/***/ "./src/resources/user/user.router.js":
/*!*******************************************!*\
  !*** ./src/resources/user/user.router.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _crudRouter = __webpack_require__(/*! ../../utils/crudRouter */ \"./src/utils/crudRouter.js\");\n\nvar _crudRouter2 = _interopRequireDefault(_crudRouter);\n\nvar _user = __webpack_require__(/*! ./user.model */ \"./src/resources/user/user.model.js\");\n\nvar _user2 = _interopRequireDefault(_user);\n\nvar _exchange = __webpack_require__(/*! ../exchange/exchange.model */ \"./src/resources/exchange/exchange.model.js\");\n\nvar _exchange2 = _interopRequireDefault(_exchange);\n\nvar _order = __webpack_require__(/*! ../order/order.model */ \"./src/resources/order/order.model.js\");\n\nvar _order2 = _interopRequireDefault(_order);\n\nvar _trade = __webpack_require__(/*! ../trade/trade.model */ \"./src/resources/trade/trade.model.js\");\n\nvar _trade2 = _interopRequireDefault(_trade);\n\nvar _position = __webpack_require__(/*! ../position/position.model */ \"./src/resources/position/position.model.js\");\n\nvar _position2 = _interopRequireDefault(_position);\n\nvar _FtxClient = __webpack_require__(/*! ../../clients/FtxClient */ \"./src/clients/FtxClient.js\");\n\nvar _FtxClient2 = _interopRequireDefault(_FtxClient);\n\nvar _CoinbaseClient = __webpack_require__(/*! ../../clients/CoinbaseClient */ \"./src/clients/CoinbaseClient.js\");\n\nvar _CoinbaseClient2 = _interopRequireDefault(_CoinbaseClient);\n\nvar _KrakenClient = __webpack_require__(/*! ../../clients/KrakenClient */ \"./src/clients/KrakenClient.js\");\n\nvar _KrakenClient2 = _interopRequireDefault(_KrakenClient);\n\nvar _KrakenFuturesClient = __webpack_require__(/*! ../../clients/KrakenFuturesClient */ \"./src/clients/KrakenFuturesClient.js\");\n\nvar _KrakenFuturesClient2 = _interopRequireDefault(_KrakenFuturesClient);\n\nvar _BinanceClient = __webpack_require__(/*! ../../clients/BinanceClient */ \"./src/clients/BinanceClient.js\");\n\nvar _BinanceClient2 = _interopRequireDefault(_BinanceClient);\n\nvar _GeminiClient = __webpack_require__(/*! ../../clients/GeminiClient */ \"./src/clients/GeminiClient.js\");\n\nvar _GeminiClient2 = _interopRequireDefault(_GeminiClient);\n\nvar _KrakenFuturesAdapter = __webpack_require__(/*! ../../adapters/KrakenFuturesAdapter */ \"./src/adapters/KrakenFuturesAdapter.js\");\n\nvar _KrakenFuturesAdapter2 = _interopRequireDefault(_KrakenFuturesAdapter);\n\nvar _FtxAdapter = __webpack_require__(/*! ../../adapters/FtxAdapter */ \"./src/adapters/FtxAdapter.js\");\n\nvar _FtxAdapter2 = _interopRequireDefault(_FtxAdapter);\n\nvar _CoinbaseAdapter = __webpack_require__(/*! ../../adapters/CoinbaseAdapter */ \"./src/adapters/CoinbaseAdapter.js\");\n\nvar _CoinbaseAdapter2 = _interopRequireDefault(_CoinbaseAdapter);\n\nvar _KrakenAdapter = __webpack_require__(/*! ../../adapters/KrakenAdapter */ \"./src/adapters/KrakenAdapter.js\");\n\nvar _KrakenAdapter2 = _interopRequireDefault(_KrakenAdapter);\n\nvar _BinanceAdapter = __webpack_require__(/*! ../../adapters/BinanceAdapter */ \"./src/adapters/BinanceAdapter.js\");\n\nvar _BinanceAdapter2 = _interopRequireDefault(_BinanceAdapter);\n\nvar _GeminiAdapter = __webpack_require__(/*! ../../adapters/GeminiAdapter */ \"./src/adapters/GeminiAdapter.js\");\n\nvar _GeminiAdapter2 = _interopRequireDefault(_GeminiAdapter);\n\nvar _GdaxAdapter = __webpack_require__(/*! ../../adapters/GdaxAdapter */ \"./src/adapters/GdaxAdapter.js\");\n\nvar _GdaxAdapter2 = _interopRequireDefault(_GdaxAdapter);\n\nvar _PoloniexAdapter = __webpack_require__(/*! ../../adapters/PoloniexAdapter */ \"./src/adapters/PoloniexAdapter.js\");\n\nvar _PoloniexAdapter2 = _interopRequireDefault(_PoloniexAdapter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import { toCoinbaseOrders } from '../CoinbaseAdapter';\n//import { toGdaxOrders } from '../GdaxAdapter';\n// Clients\n// Adapters\nvar router = (0, _crudRouter2.default)(_user2.default);\n/*** /:ID/EXCHANGES ***/\n\nrouter.route('/:id/exchanges').get((req, res) => {\n  _user2.default.findById(req.params.id, 'exchanges').populate({\n    path: 'exchanges',\n    populate: {\n      path: 'exchange',\n      model: _exchange2.default\n    }\n  }).exec((err, exchanges) => {\n    if (err) {\n      console.log(err);\n      res.status(400).end();\n    }\n\n    res.status(200).json(exchanges);\n  });\n}).post((req, res) => {\n  _user2.default.findById(req.params.id, (err, user) => {\n    if (err) {\n      console.log(err);\n      res.status(400).end();\n    }\n\n    let exchange = user.exchanges.id(req.body.id); // if exchange already exsits -> update\n\n    if (exchange) exchange.set(req.body); // if exchange deasn't exist -> create\n    else user.exchanges.push({\n        'exchange': req.body.id\n      });\n    user.save((err, doc) => {\n      if (err) {\n        console.log('here');\n        console.log(err);\n        res.status(400).end();\n      }\n\n      res.status(200).json(doc);\n    });\n  });\n}).delete((req, res) => {\n  if (req.body.id) {\n    // Delete specific exchange\n    _user2.default.updateOne({\n      '_id': req.params.id\n    }, {\n      '$pull': {\n        'exchanges': {\n          'exchange': req.body.id\n        }\n      }\n    }, (err, doc) => {\n      if (err) {\n        console.log(err);\n        res.status(400).end();\n      }\n\n      res.status(200).json(doc);\n    });\n  } else {\n    // Delete all exchanges\n    _user2.default.updateOne({\n      '_id': req.params.id\n    }, {\n      '$set': {\n        'exchanges': []\n      }\n    }, (err, doc) => {\n      if (err) {\n        console.log(err);\n        res.status(400).end();\n      }\n\n      res.status(200).json(doc);\n    });\n  }\n});\n\nasync function createDbEntries(userId, data) {\n  var {\n    orders,\n    positions\n  } = data; // Orders + Positions\n\n  if (orders) {\n    let orders = data.orders; // Handle orders and trades\n\n    for (let order of orders) {\n      let tradeDocs = await _trade2.default.insertMany(order.trades);\n      order.tradeIds = tradeDocs.map(tradeDoc => tradeDoc.id);\n      delete order.trades;\n    }\n\n    var orderDocs = await _order2.default.insertMany(orders); // Handle positions\n\n    for (let position of positions) {\n      let basisIds = position.basisTrades.map(trade => trade.orderId);\n      let basisTradeIds = await _order2.default.find({\n        orderId: {\n          $in: basisIds\n        }\n      }, 'id');\n      position.basisTradeIds = basisTradeIds;\n      delete position.basisTrades;\n\n      if (position.collateralType === 'crypto') {\n        let fundingIds = position.fundingTrades.map(trade => trade.orderId);\n        let fundingTradeIds = await _order2.default.find({\n          orderId: {\n            $in: fundingIds\n          }\n        }, 'id');\n        position.fundingTradeIds = fundingTradeIds;\n        delete position.fundingTrades;\n        let compensationIds = position.compensationTrades.map(trade => trade.orderId);\n        let compensationTradeIds = await _order2.default.find({\n          orderId: {\n            $in: compensationIds\n          }\n        }, 'id');\n        position.compensationTradeIds = compensationTradeIds;\n        delete position.compensationTrades;\n      }\n    }\n\n    let positionDocs = await _position2.default.insertMany(positions);\n    return {\n      orders: orderDocs,\n      positions: positionDocs\n    };\n  } else {\n    // Just Positions\n    for (let position of positions) {\n      // Basis trades\n      position.basisTradeIds = [];\n\n      for (let trade of position.basisTrades) {\n        let doc = await _trade2.default.create(trade);\n        position.basisTradeIds.push(doc.id);\n      }\n\n      delete position.basisTrades; // Compensation trades\n\n      position.compensationTradeIds = [];\n\n      for (let trade of position.compensationTrades) {\n        let doc = await _trade2.default.create(trade);\n        position.compensationTradeIds.push(doc.id);\n      }\n\n      delete position.compensationTrades; // Funding trades\n\n      position.fundingTradeIds = [];\n\n      for (let trade of position.fundingTrades) {\n        let doc = await _trade2.default.create(trade);\n        position.fundingTradeIds.push(doc.id);\n      }\n\n      delete position.fundingTrades;\n    }\n\n    let positionDocs = await _position2.default.insertMany(positions);\n    return {\n      positions: positionDocs\n    };\n  }\n}\n\nfunction selectAdapter(exchange, userId) {\n  var adapter;\n\n  switch (exchange) {\n    case 'Coinbase':\n      adapter = new _CoinbaseAdapter2.default(userId);\n      break;\n\n    case 'Gemini':\n      adapter = new _GeminiAdapter2.default(userId);\n      break;\n\n    case 'Kraken':\n      adapter = new _KrakenAdapter2.default(userId);\n      break;\n\n    case 'Kraken Futures':\n      adapter = new _KrakenFuturesAdapter2.default(userId);\n      break;\n\n    case 'Binance':\n      adapter = new _BinanceAdapter2.default(userId);\n      break;\n\n    case 'Ftx':\n      adapter = new _FtxAdapter2.default(userId);\n      break;\n\n    case 'Gdax':\n      adapter = new _GdaxAdapter2.default(userId);\n      break;\n\n    case 'Poloniex':\n      adapter = new _PoloniexAdapter2.default(userId);\n      break;\n\n    default:\n      throw new Error('exchange not recognized');\n  }\n\n  return adapter;\n}\n\nfunction selectClient(exchange, apiKey, apiSecret) {\n  var client;\n\n  switch (exchange) {\n    case 'Coinbase':\n      client = new _CoinbaseClient2.default(apiKey, apiSecret);\n      break;\n\n    case 'Gemini':\n      client = new _GeminiClient2.default(apiKey, apiSecret);\n      break;\n\n    case 'Kraken':\n      client = new _KrakenClient2.default(apiKey, apiSecret);\n      break;\n\n    case 'Kraken Futures':\n      client = new _KrakenFuturesClient2.default(apiKey, apiSecret);\n      break;\n\n    case 'Binance':\n      client = new _BinanceClient2.default(apiKey, apiSecret);\n      break;\n\n    case 'Ftx':\n      client = new _FtxClient2.default(apiKey, apiSecret);\n      break;\n\n    default:\n      throw new Error('exchange not recognized');\n  }\n\n  return client;\n}\n/*** /:ID/ORDERS/API ***/\n\n\nrouter.route('/:id/orders/api').post(async (req, res) => {\n  let apiKey = req.body.data.apiKey; // NOT SAFE!!!!\n\n  let apiSecret = req.body.data.apiSecret; // NOT SAFE!!!\n\n  let client = selectClient(req.body.data.exchange, apiKey, apiSecret);\n  let adapter = selectAdapter(req.body.data.exchange, req.params.id);\n  let data = await adapter.processApiData(client);\n\n  try {\n    await createDbEntries(req.params.id, data);\n    res.status(200).json(data);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n});\n/*** /:ID/ORDERS/CSV ***/\n\nrouter.route('/:id/orders/csv').post(async (req, res) => {\n  try {\n    let adapter = selectAdapter(req.body.exchange, req.params.id);\n    let data = adapter.processCsvData(req.body.lines); //await createDbEntries(req.params.id, data)\n\n    res.status(200).json(data);\n  } catch (err) {\n    console.log(err);\n  }\n});\n/*** /:ID/EXCHANGE/:NAME/AUTH_DATA ***/\n\n/*** /:ID/TRADES ***/\n\nrouter.route('/:id/trades').get(async (req, res) => {\n  var trades;\n\n  try {\n    // Specific exchange\n    if (req.query.exchange) {\n      trades = await _trade2.default.find({\n        userId: req.params.id,\n        exchange: req.query.exchange\n      });\n    } // All trades\n    else {\n        trades = await _trade2.default.find({\n          userId: req.params.id\n        });\n      }\n\n    res.status(200).json(trades);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}).delete(async (req, res) => {\n  try {\n    await _trade2.default.deleteMany({\n      userId: req.params.id\n    });\n    res.status(200).json('Delete trades success');\n  } catch (err) {\n    res.status(400).end();\n  }\n});\n/*** /:ID/ORDERS ***/\n\nrouter.route('/:id/orders').get(async (req, res) => {\n  var orders;\n\n  try {\n    // Specific exchange\n    if (req.query.exchange) {\n      orders = await _order2.default.find({\n        userId: req.params.id,\n        exchange: req.query.exchange\n      });\n    } // All orders\n    else {\n        orders = await _order2.default.find({\n          userId: req.params.id\n        });\n      }\n\n    res.status(200).json(orders);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}).delete(async (req, res) => {\n  try {\n    if (req.body.id) {\n      let orderDoc = await _order2.default.findOneAndDelete({\n        '_id': req.body.id\n      }); // Delete order's trades\n\n      await orderDoc.deleteTrades();\n    } else if (req.body.exchange) {\n      // Find orders in Order database for exchange\n      let orderDocs = await _order2.default.find({\n        userId: req.params.id,\n        exchange: req.body.exchange\n      });\n\n      for (let orderDoc of orderDocs) {\n        // Delete order's trade\n        await orderDoc.deleteTrades(); // Delete order in Order database\n\n        await _order2.default.findOneAndDelete({\n          '_id': orderDoc.id\n        });\n      }\n    } else {\n      // Delete all user's orders\n      await _order2.default.deleteMany({\n        userId: req.params.id\n      }); // Delete all user's trades\n\n      await _trade2.default.deleteMany({\n        userId: req.params.id\n      });\n    }\n\n    res.status(200).json('Delete orders success');\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n});\n/*** /:ID/POSITIONS ***/\n\nrouter.route('/:id/positions').get(async (req, res) => {\n  var positions;\n\n  try {\n    if (req.query.exchange) {\n      // Specific exchange\n      positions = await _position2.default.find({\n        userId: req.params.id,\n        exchange: req.query.exchange\n      });\n    } else {\n      // All positions\n      positions = await _position2.default.find({\n        userId: req.params.id\n      });\n    }\n\n    res.status(200).json(positions);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}).post(async (req, res) => {\n  try {\n    let userDoc = _user2.default.findById(req.params.id, 'settings');\n\n    await userDoc.updateSettings(req.body.data.userSettings);\n    await userDoc.save();\n    res.status(200).json('User settings updated');\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}).delete(async (req, res) => {\n  try {\n    if (req.body.id) {\n      // Delete one position\n      await _position2.default.findOneAndDelete({\n        '_id': req.body.id\n      });\n    } else if (req.body.exchange) {\n      // Find positions in Position database for exchange\n      let positionDocs = await _position2.default.find({\n        userId: req.params.id,\n        exchange: req.body.exchange\n      });\n\n      for (let positionDoc of positionDocs) {\n        // Delete position's trades\n        await positionDoc.deleteTrades(); // Delete position in Position database\n\n        await _position2.default.findOneAndDelete({\n          '_id': positionDoc.id\n        });\n      }\n    } else {\n      // Delete all user's positions\n      await _position2.default.deleteMany({\n        userId: req.params.id\n      });\n    }\n\n    res.status(200).json('Delete positions success');\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n});\n/*** /:ID/SETTINGS ***/\n\nrouter.route('/:id/settings').get(async (req, res) => {\n  try {\n    let userSettings = await _user2.default.findById(req.params.id, 'settings');\n    return res.status(200).json(userSettings.settings);\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n}).post(async (req, res) => {\n  try {\n    let userDoc = await _user2.default.findById(req.params.id);\n    await userDoc.updateSettings(req.body);\n    res.status(200).json('User settings updated');\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n});\nexports.default = router;\n\n//# sourceURL=webpack://uniport-backend/./src/resources/user/user.router.js?");

/***/ }),

/***/ "./src/router.js":
/*!***********************!*\
  !*** ./src/router.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar _db = __webpack_require__(/*! ./db */ \"./src/db.js\");\n\nvar _papaparse = __webpack_require__(/*! papaparse */ \"papaparse\");\n\nvar _papaparse2 = _interopRequireDefault(_papaparse);\n\nvar _axios = __webpack_require__(/*! axios */ \"axios\");\n\nvar _axios2 = _interopRequireDefault(_axios);\n\nvar _fs = __webpack_require__(/*! fs */ \"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\nimport processKrakenFuturesLines from './resources/KrakenFuturesAdapter';\nimport processCoinbaseLines from './resources/CoinbaseAdapter';\nimport processGdaxLines from './resources/GdaxAdapter';\n*/\n(0, _db.start)();\n\n_db.app.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', '*');\n  res.header('Access-Control-Allow-Headers', '*');\n  next();\n});\n/*\napp.use((req, res, next) => {\n\t\tres.header('Access-Control-Allow-Origin', '*');\n\t\tres.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n\t\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n\t\tnext();\n});\n*/\n\n/*\napp.post('/process-kraken-futures-trades', async (req, res, next) => {\n\t\tres.status(200);\n\t\tres.send('success');\n\t\tvar lines = Object.keys(req.body).map(key => req.body[key]);\n\t\tawait processKrakenFuturesLines(lines.reverse());\n});\n\napp.post('/process-gdax-trades', async (req, res, next) => {\n\t\tres.status(200);\n\t\tres.send('success');\n\t\tvar lines = Object.keys(req.body).map(key => req.body[key]);\n\t\tawait processGdaxLines(lines);\n})\n\napp.post('/process-coinbase-trades', async (req, res, next) => {\n\t\tres.status(200);\n\t\tres.send('success');\n\t\tvar lines = Object.keys(req.body).map(key => req.body[key]);\n\t  console.log(req.userId);\n\t\t//await processCoinbaseLines(lines.reverse(), req.userId);\n})\n*/\n\n\n_db.app.get('/print-trades', async (req, res, next) => {\n  try {\n    const userId = '62015b3eec19272ccca25765'; //const orders = await axios.get('http://localhost:3000/api/user/' + userId + '/orders')\n\n    const trades = await _axios2.default.get('http://localhost:3000/api/user/' + userId + '/trades'); //console.log('trades', trades);\n\n    var csv = tradesToCsv(trades.data);\n\n    _fs2.default.writeFile('../trades.csv', csv, err => {\n      if (err) throw err;\n    });\n\n    res.status(200);\n    res.send('File created');\n  } catch (err) {\n    console.log(err);\n    res.status(400);\n    res.send(err);\n  }\n});\n\n_db.app.get('/print-positions', async (req, res, next) => {\n  try {\n    const userId = '62015b3eec19272ccca25765';\n    const positions = await _axios2.default.get('http://localhost:3000/api/user/' + userId + '/positions');\n    const csv = positionsToCsv(positions.data);\n\n    _fs2.default.writeFile('../positions.csv', csv, err => {\n      if (err) throw err;\n    });\n\n    res.status(200);\n    res.send('File created');\n  } catch (err) {\n    console.log(err);\n    res.status(400);\n    res.send(err);\n  }\n});\n\nfunction converToObj(item) {\n  let buyAmount, buyCurrency, sellAmount, sellCurrency;\n\n  if (item.amount > 0) {\n    buyAmount = item.amount;\n    buyCurrency = item.base;\n    sellAmount = item.amount * item.price;\n    sellCurrency = item.quote;\n  } else {\n    buyAmount = -item.amount * item.price;\n    buyCurrency = item.quote;\n    sellAmount = -item.amount;\n    sellCurrency = item.base;\n  }\n\n  return {\n    'Type': 'Trade',\n    'BuyAmount': buyAmount,\n    'BuyCurrency': buyCurrency,\n    'SellAmount': sellAmount,\n    'SellCurrency': sellCurrency,\n    'FeeAmount': item.fee,\n    'FeeCurrency': item.feeCurrency,\n    'Exchange': item.exchange,\n    'Group': null,\n    'Comment': null,\n    'Date': item.dateTime\n  };\n}\n\nfunction tradesToCsv(trades) {\n  var ret = [];\n\n  for (let trade of trades) {\n    if (trade.type === 'future-pnl' || trade.type === 'spot') {\n      ret.push(converToObj(trade));\n    }\n  }\n\n  return _papaparse2.default.unparse(ret, {\n    header: true\n  });\n}\n\nfunction positionsToCsv(positions) {\n  var ret = [];\n\n  for (let position of positions) {\n    const fundingFeeUSD = position.fundingFeeCurrency === 'USD' ? position.fundingFee : position.fundingFee * position.closePrice;\n    ret.push({\n      'Exchange': position.exchange,\n      'Date Open': position.dateOpen,\n      'Date Close': position.dateClose,\n      'Base': position.base,\n      'Quote': position.quote,\n      'Open Price': position.openPrice,\n      'Close Price': position.closePrice,\n      'Basis Fee': position.basisFee,\n      'Basis Fee Currency': position.basisFeeCurrency,\n      'Funding Fee': position.fundingFee,\n      'Funding Fee Currency': position.fundingFeeCurrency,\n      'Gross PNL': position.pnl,\n      'Net PNL': position.pnl - position.basisFee - fundingFeeUSD,\n      'Collateral Type': position.collateralType\n    });\n  }\n\n  return _papaparse2.default.unparse(ret, {\n    header: true\n  });\n}\n\n_db.app.listen(3000, () => {\n  console.log('Listening on port 3000');\n});\n\n//# sourceURL=webpack://uniport-backend/./src/router.js?");

/***/ }),

/***/ "./src/utils/Map.js":
/*!**************************!*\
  !*** ./src/utils/Map.js ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _functionalRedBlackTree = __webpack_require__(/*! functional-red-black-tree */ \"functional-red-black-tree\");\n\nvar _functionalRedBlackTree2 = _interopRequireDefault(_functionalRedBlackTree);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass Map {\n  constructor() {\n    this._tree = (0, _functionalRedBlackTree2.default)();\n  }\n\n  insert(key, value) {\n    this._tree = this._tree.insert(key, value);\n  }\n\n  getValue(key) {\n    const iter = this._tree.find(key);\n\n    return iter.value;\n  }\n\n  remove(key) {\n    this._tree = this._tree.remove(key);\n  }\n\n  contains(key) {\n    const iter = this._tree.find(key);\n\n    if (iter.node) return true;\n    return false;\n  }\n\n  getKeyValuePairsArray() {\n    const iter = this._tree.begin;\n    const pairs = [];\n\n    while (iter.valid) {\n      const key = iter.node.key;\n      const value = iter.node.value;\n      pairs.push([key, value]);\n      iter.next();\n    }\n\n    return pairs;\n  }\n\n}\n\nexports.default = Map;\n\n//# sourceURL=webpack://uniport-backend/./src/utils/Map.js?");

/***/ }),

/***/ "./src/utils/crud.js":
/*!***************************!*\
  !*** ./src/utils/crud.js ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar createOne = model => async (req, res) => {\n  try {\n    let doc = await model.create({ ...req.body\n    });\n    res.status(201).json(doc);\n  } catch (e) {\n    console.log(e);\n    res.status(400).end();\n  }\n};\n\nvar getOne = model => async (req, res) => {\n  try {\n    let doc = await model.find({ ...req.body\n    }).lean();\n    res.status(200).json(doc);\n  } catch (e) {\n    console.log(e);\n    res.status(400).end();\n  }\n};\n\nvar getById = model => async (req, res) => {\n  try {\n    let doc = await model.findById(req.params.id).lean();\n    res.status(200).json(doc);\n  } catch (e) {\n    console.log(e);\n    res.status(400).end();\n  }\n};\n\nvar getAll = model => async (req, res) => {\n  try {\n    let docs = await model.find({}).lean();\n    res.status(200).json(docs);\n  } catch (e) {\n    console.log(e);\n    res.status(400).end();\n  }\n};\n\nvar deleteOne = model => (req, res) => {\n  try {\n    model.findOneAndDelete({ ...req.body\n    }, (err, removed) => {\n      return res.status(200).json(removed);\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n};\n\nvar deleteById = model => (req, res) => {\n  try {\n    model.findByIdAndDelete(req.params.id, (err, removed) => {\n      return res.status(200).json(removed);\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n};\n\nvar deleteAll = model => async (req, res) => {\n  try {\n    let removed = await model.deleteMany({});\n    if (!removed) return res.status(400).end();\n    res.status(200).json({\n      data: removed\n    });\n  } catch (err) {\n    console.log(err);\n    res.status(400).end();\n  }\n};\n\nexports.default = model => {\n  return {\n    createOne: createOne(model),\n    getOne: getOne(model),\n    getById: getById(model),\n    deleteOne: deleteOne(model),\n    deleteById: deleteById(model),\n    deleteAll: deleteAll(model),\n    getAll: getAll(model)\n  };\n};\n\n//# sourceURL=webpack://uniport-backend/./src/utils/crud.js?");

/***/ }),

/***/ "./src/utils/crudRouter.js":
/*!*********************************!*\
  !*** ./src/utils/crudRouter.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _express = __webpack_require__(/*! express */ \"express\");\n\nvar _express2 = _interopRequireDefault(_express);\n\nvar _crud = __webpack_require__(/*! ./crud */ \"./src/utils/crud.js\");\n\nvar _crud2 = _interopRequireDefault(_crud);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// /api/exchange\nfunction setup(model) {\n  var router = _express2.default.Router();\n\n  router.route('/').get((0, _crud2.default)(model).getOne).post((0, _crud2.default)(model).createOne).delete((0, _crud2.default)(model).deleteOne);\n  router.route('/all').get((0, _crud2.default)(model).getAll).delete((0, _crud2.default)(model).deleteAll);\n  router.route('/:id').get((0, _crud2.default)(model).getById).delete((0, _crud2.default)(model).deleteById);\n  return router;\n}\n\nexports.default = model => setup(model);\n\n//# sourceURL=webpack://uniport-backend/./src/utils/crudRouter.js?");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");;

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("body-parser");;

/***/ }),

/***/ "crypto-js":
/*!****************************!*\
  !*** external "crypto-js" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("crypto-js");;

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");;

/***/ }),

/***/ "functional-red-black-tree":
/*!********************************************!*\
  !*** external "functional-red-black-tree" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("functional-red-black-tree");;

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("moment");;

/***/ }),

/***/ "mongoose":
/*!***************************!*\
  !*** external "mongoose" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("mongoose");;

/***/ }),

/***/ "papaparse":
/*!****************************!*\
  !*** external "papaparse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("papaparse");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/router.js");
/******/ 	
/******/ })()
;